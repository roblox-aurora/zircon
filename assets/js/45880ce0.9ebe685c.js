"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[781],{867:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],s={sidebar_position:3},u="Configuring and using scripting",l={unversionedId:"tutorial-basics/commands",id:"tutorial-basics/commands",isDocsHomePage:!1,title:"Configuring and using scripting",description:"Another use for Zircon is the ability to programmatically manipulate your game during runtime.",source:"@site/docs/tutorial-basics/commands.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/commands",permalink:"/docs/tutorial-basics/commands",editUrl:"https://github.com/roblox-aurora/zircon/edit/main/docs/docs/tutorial-basics/commands.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Configuring and using the logger",permalink:"/docs/tutorial-basics/logging"}},c=[{value:"Adding Functions",id:"adding-functions",children:[]}],p={toc:c};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configuring-and-using-scripting"},"Configuring and using scripting"),(0,a.kt)("p",null,"Another use for Zircon is the ability to programmatically manipulate your game during runtime."),(0,a.kt)("p",null,"By default, script execution is limited to ",(0,a.kt)("em",{parentName:"p"},"only")," the creator of the game or group owner."),(0,a.kt)("h2",{id:"adding-functions"},"Adding Functions"),(0,a.kt)("p",null,"Functions in Zircon use the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/roblox-aurora/zirconium"},"Zirconium")," language and thus are sandboxed + use the syntax of that language"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { ZirconServer, ZirconFunctionBuilder } from "@rbxts/zircon";\nimport Log from "@rbxts/log";\n\nZirconServer.Registry.RegisterFunction(\n    new ZirconFunctionBuilder("print_message")\n        .AddArgument("string")\n        .Bind((context, message) => Log.Info(\n                "Zircon says {Message} from {Player}", \n                message,\n                context.GetExecutor()\n        )),\n    [ZirconServer.Registry.User]\n)\n')),(0,a.kt)("p",null,"This will create a global ",(0,a.kt)("inlineCode",{parentName:"p"},"print_message")," that all players can run."),(0,a.kt)("p",null,"Then if run in Zircon:"),(0,a.kt)("img",{src:"/img/Example1.png"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"ZirconServer.Registry")," is the server registry")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"ZirconFunctionBuilder")," here is a builder class, in which allows you to configure the executable function."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AddArgument")," adds an argument type, internal types you can use a ",(0,a.kt)("em",{parentName:"li"},"string")," id, such as ",(0,a.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"number"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"boolean"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"player")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"unknown"),". This will infer the zircon function types for the ",(0,a.kt)("inlineCode",{parentName:"li"},"Bind")," function + enforce type checking when this function is called."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Bind")," binds the arguments to the function you provide, the first argument of the function is ",(0,a.kt)("em",{parentName:"li"},"always")," ",(0,a.kt)("inlineCode",{parentName:"li"},"context"),"; which is the zircon runtime's context (useful for getting things like the executing player)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"ZirconServer.Registry.RegisterFunction")," takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"ZirconFunction"),", which ",(0,a.kt)("inlineCode",{parentName:"p"},"ZiroconFunctionBuilder.Build(...)")," returns. The second argument to ",(0,a.kt)("inlineCode",{parentName:"p"},"RegisterFunction")," is the ",(0,a.kt)("em",{parentName:"p"},"groups")," that can execute this function. By default you ",(0,a.kt)("em",{parentName:"p"},"should")," limit it to ",(0,a.kt)("inlineCode",{parentName:"p"},"Creator"),"."))),(0,a.kt)("p",null,"The default groups available to Zircon are ",(0,a.kt)("inlineCode",{parentName:"p"},"Creator"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Administrator")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"User"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"Creator")," is the place or group owner, ",(0,a.kt)("inlineCode",{parentName:"p"},"Administrator")," is a group that requires explicit users and ",(0,a.kt)("inlineCode",{parentName:"p"},"User")," is any user. It is recommended that you use ",(0,a.kt)("inlineCode",{parentName:"p"},"Creator")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Administrator")," for functions."))}m.isMDXComponent=!0}}]);